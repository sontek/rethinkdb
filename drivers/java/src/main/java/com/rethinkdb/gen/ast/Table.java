// Autogenerated by metajava.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../../templates/AstSubclass.java

package com.rethinkdb.gen.ast;

import com.rethinkdb.gen.proto.TermType;
import com.rethinkdb.model.Arguments;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.ast.ReqlAst;



public class Table extends ReqlExpr {


    public Table(java.lang.Object arg) {
        this(new Arguments(arg), null);
    }
    public Table(Arguments args, OptArgs optargs) {
        this(null, args, optargs);
    }
    public Table(ReqlAst prev, Arguments args, OptArgs optargs) {
        this(prev, TermType.TABLE, args, optargs);
    }
    protected Table(ReqlAst previous, TermType termType, Arguments args, OptArgs optargs){
        super(previous, termType, args, optargs);
    }


    /* Static factories */
    public static Table fromArgs(Object... args){
        return new Table(new Arguments(args), null);
    }


    public Get get() {
        return new Get(this, new Arguments(fields), new OptArgs());
    }
    public GetAll getAll() {
        return new GetAll(this, new Arguments(fields), new OptArgs());
    }
    public Between between() {
        return new Between(this, new Arguments(fields), new OptArgs());
    }
    public Insert insert() {
        return new Insert(this, new Arguments(fields), new OptArgs());
    }
    public Config config() {
        return new Config(this, new Arguments(fields), new OptArgs());
    }
    public Config config() {
        return new Config(this, new Arguments(fields), new OptArgs());
    }
    public Status status() {
        return new Status(this, new Arguments(fields), new OptArgs());
    }
    public Wait wait() {
        return new Wait(this, new Arguments(fields), new OptArgs());
    }
    public Wait wait() {
        return new Wait(this, new Arguments(fields), new OptArgs());
    }
    public Wait wait() {
        return new Wait(this, new Arguments(fields), new OptArgs());
    }
    public Reconfigure reconfigure() {
        return new Reconfigure(this, new Arguments(fields), new OptArgs());
    }
    public Reconfigure reconfigure() {
        return new Reconfigure(this, new Arguments(fields), new OptArgs());
    }
    public Reconfigure reconfigure() {
        return new Reconfigure(this, new Arguments(fields), new OptArgs());
    }
    public Rebalance rebalance() {
        return new Rebalance(this, new Arguments(fields), new OptArgs());
    }
    public Rebalance rebalance() {
        return new Rebalance(this, new Arguments(fields), new OptArgs());
    }
    public Rebalance rebalance() {
        return new Rebalance(this, new Arguments(fields), new OptArgs());
    }
    public Sync sync() {
        return new Sync(this, new Arguments(fields), new OptArgs());
    }
    public IndexCreate indexCreate() {
        return new IndexCreate(this, new Arguments(fields), new OptArgs());
    }
    public IndexCreate indexCreate() {
        return new IndexCreate(this, new Arguments(fields), new OptArgs());
    }
    public IndexDrop indexDrop() {
        return new IndexDrop(this, new Arguments(fields), new OptArgs());
    }
    public IndexList indexList() {
        return new IndexList(this, new Arguments(fields), new OptArgs());
    }
    public IndexStatus indexStatus() {
        return new IndexStatus(this, new Arguments(fields), new OptArgs());
    }
    public IndexWait indexWait() {
        return new IndexWait(this, new Arguments(fields), new OptArgs());
    }
    public IndexRename indexRename() {
        return new IndexRename(this, new Arguments(fields), new OptArgs());
    }
    public GetIntersecting getIntersecting() {
        return new GetIntersecting(this, new Arguments(fields), new OptArgs());
    }
    public GetNearest getNearest() {
        return new GetNearest(this, new Arguments(fields), new OptArgs());
    }
}
